# 工作流名称
name: Build and Release

# 触发器配置
on:
  # 1. 当一个以 'v' 开头的 tag 被推送到仓库时自动触发
  push:
    tags:
      - 'v*'

  # 2. 允许在 GitHub Actions 页面手动触发
  workflow_dispatch:
    inputs:
      # 手动触发时，仅需指定要构建的分支或标签
      ref_to_checkout:
        description: '要构建的分支或标签 (例如: main)'
        required: true
        default: 'main'

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 步骤 1: Checkout 代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # push 时使用 github.ref, 手动时使用用户输入的 ref_to_checkout
          ref: ${{ github.event.inputs.ref_to_checkout || github.ref }}

      # 步骤 2: 安装 .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 步骤 3: 下载并解压 BizHawk
      - name: Download and Extract BizHawk
        run: |
          Invoke-WebRequest -Uri "https://github.com/TASEmulators/BizHawk/releases/download/2.11/BizHawk-2.11-win-x64.zip" -OutFile "BizHawk.zip"
          Expand-Archive -Path "BizHawk.zip" -DestinationPath "BizHawk"
        shell: pwsh

      # 步骤 4: 编译 VieeExtractor 项目
      - name: Build VieeExtractor Project
        run: dotnet build -c Release VieeExtractor/VieeExtractor.csproj
        shell: pwsh

      # 步骤 5: 编译并发布 VieeSubtitleGenerator 项目
      - name: Build and Publish VieeSubtitleGenerator Project
        run: dotnet publish -c Release -o ./publish_output VieeSubtitleGenerator/VieeSubtitleGenerator.csproj
        shell: pwsh

      # 步骤 6: 整理文件以供完整包打包
      - name: Stage Full Release Files
        run: |
          New-Item -ItemType Directory -Path ./Achieve
          Copy-Item -Path ./BizHawk -Destination ./Achieve/BizHawk-2.11-win-x64 -Recurse
          Copy-Item -Path ./publish_output -Destination ./Achieve/VieeSubtitleGenerator -Recurse
        shell: pwsh

      # 步骤 7: 将 Achieve 文件夹内容打包成 ZIP (完整包)
      - name: Create Full ZIP Archive
        run: Compress-Archive -Path ./Achieve/* -DestinationPath ./Viee-win-x64.zip
        shell: pwsh
      
      # 步骤 8: 整理用于升级包的文件
      # 仅在创建 tag release 时执行
      - name: Stage Upgrade Files
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # 1. 创建一个根目录用于存放升级文件
          New-Item -ItemType Directory -Path ./UpgradePackage

          # 2. 在根目录下创建 ExternalTools 文件夹，并将内容复制进去
          New-Item -ItemType Directory -Path ./UpgradePackage/ExternalTools
          Copy-Item -Path ./BizHawk/ExternalTools/* -Destination ./UpgradePackage/ExternalTools -Recurse

          # 3. 在根目录下创建 VieeSubtitleGenerator 文件夹，并将内容复制进去
          New-Item -ItemType Directory -Path ./UpgradePackage/VieeSubtitleGenerator
          Copy-Item -Path ./publish_output/* -Destination ./UpgradePackage/VieeSubtitleGenerator -Recurse
        shell: pwsh

      # 步骤 9: 将升级文件打包成 ZIP
      # 仅在创建 tag release 时执行
      - name: Create Upgrade ZIP Archive
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # 使用 tag 名称来命名升级包
          Compress-Archive -Path ./UpgradePackage/* -DestinationPath ./Upgrade-${{ github.ref_name }}.zip
        shell: pwsh

      # 步骤 10: 如果是手动触发，则将完整包作为 Artifact 上传
      - name: Upload Artifact for Manual Run
        if: github.event_name == 'workflow_dispatch' # 关键条件：仅在手动运行时执行
        uses: actions/upload-artifact@v4
        with:
          name: Viee-win-x64-Package # 下载的 Artifact 名称
          path: ./Viee-win-x64.zip  # 要上传的文件

      # 步骤 11: 创建 GitHub Release 并上传两个 ZIP 文件
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          # 直接使用触发工作流的 tag 名称
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          # 如果 tag 名称包含 '-' (例如 v1.0.0-beta), 标记为预发布
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            ./Viee-win-x64.zip
            ./Upgrade-${{ github.ref_name }}.zip